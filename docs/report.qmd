
---
title: "Spatio‑Temporal Patterns of African Hominins"
author: "Hominid Dates Project"
date: "`r format(Sys.Date(), '%d %b %Y')`"
format:
  pdf:
    toc: true
    number-sections: false
    geometry:
      - left=0.6in
      - right=0.6in
header-includes:
  - \usepackage{pdflscape}
execute:
  echo: false
  warning: false
  message: false
execute-dir: project
---

```{r setup}
import::from("targets", tar_read)
import::from("dplyr", mutate, arrange, desc)
import::from("kableExtra", kable_styling, kable_classic, landscape)
import::from("here", here)

# Ensure tar_read() sees the project store regardless of working directory.
# Forward the unevaluated symbol as a character to tar_read_raw().
tar_read <- function(name, ...) {
  nm <- as.character(substitute(name))
  targets::tar_read_raw(name = nm, store = here("_targets"), ...)
}
```

## Overview

This report summarises what the current dataset can tell us about when and where African hominins appear in the record.

How to read this report:

- Ma: All dates are in millions of years ago (Ma). Larger numbers are older.
- Axes: Time figures use a reversed x‑axis (older on the right, younger on the left).
- Uncertainty: Some figures show a “90% interval.” This is the central range of plausible values after accounting for dating uncertainty; think of it as “where most of the evidence points,” not a hard bound.
- Takeaways: After each table or figure, we include a short, plain‑language interpretation of what to look for and why it matters.

Full reproducible workflow is available in the project GitHub repository (https://github.com/BWBrook/hominid-dates).
The emphasis here is on clear visuals and practical interpretation. But these notes are preliminary only!

---

## 1 Specimen totals

### 1.1 Genus counts

```{r genus-tbl}
genus_tbl <- tar_read(genus_species_freq)$genus_freq
knitr::kable(genus_tbl,
             caption = "Specimen counts per genus (collapsed by duplicate fragments).",
             digits = 3) |>
  kable_styling(full_width = FALSE) |>
  kable_classic()
```

```{r genus-interpret}
gf <- tar_read(genus_species_freq)$genus_freq
top <- head(gf, 3)
if (nrow(top) >= 3) {
  msg <- sprintf(
    "Interpretation: %s dominates the dataset (%s specimens), followed by %s (%s) and %s (%s). This concentration suggests sampling emphasises these genera.",
    top$genus[1], top$n_specimens[1], top$genus[2], top$n_specimens[2], top$genus[3], top$n_specimens[3]
  )
  cat(paste(strwrap(msg, width = 90), collapse = "\n"))
}
```

What to look for: The first rows show genera with the most specimens after collapsing duplicate fragments. High counts may reflect true abundance, broad geographic spread, or simply more research attention and collection history. Use this as context for later sections—well‑sampled genera will often have better‑constrained timelines.

```{r genus-plot, fig.cap="Specimen counts per genus"}
tar_read(genus_plot)
```

Reading the plot: Bars reflect specimen totals by genus. Taller bars indicate more material in the database. This does not automatically mean a genus was more common in life; collecting and preservation strongly influence these totals.

### 1.2 Species counts (top 15)

```{r species-tbl}
species_tbl <- tar_read(genus_species_freq)$species_freq
knitr::kable(species_tbl,
             caption = "Specimen counts per species (all taxa).",
             digits = 3) |>
  kable_styling(full_width = FALSE) |>
  kable_classic()
```

```{r species-interpret}
sf <- tar_read(genus_species_freq)$species_freq
top <- head(sf, 5)
if (nrow(top) > 0) {
  bul <- sprintf("- %s: %s specimens", top$species, top$n_specimens)
  cat(paste(bul, collapse = "\n"))
}
```

What to look for: The table lists species‑level totals. Species with very few specimens may yield noisier results in later analyses; treat their temporal and spatial summaries with extra caution.

```{r species-plot, fig.cap="Top 15 species by specimen count"}
tar_read(species_plot)
```

Reading the plot: We limit to the top 15 to keep the figure readable. The relative sizes mirror the table above and help set expectations about which species will have clearer signals in the next sections.

Takeaways:
- Australopithecus and Paranthropus dominate specimen counts; Homo is much rarer.
- Species counts are led by a_africanus and a_afarensis; most others are far less sampled.
- Interpret later results with this sampling context in mind.

---

## 2 Temporal ranges

We summarise, for each species, its oldest and youngest known occurrences in the dataset. These are simple bounds based on the dating information we have, before modelling uncertainty.

Notes on terminology:

- first_occ: The oldest known occurrence (bigger Ma value = older).
- last_occ: The youngest known occurrence.
- Duration: The span between first_occ and last_occ.
- Figures use a reversed time axis (older to the right, younger to the left).

```{r spans-table}
span_tbl <- tar_read(temporal_span) |>
  arrange(desc(first_occ))
```

```{r spans-kable}
knitr::kable(span_tbl,
             caption = "First and last appearances by species (Ma).",
             digits = 3) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
```

```{r spans-interpret}
dur_sorted <- dplyr::arrange(span_tbl, dplyr::desc(duration))
top <- head(dur_sorted, 3)
if (nrow(top) > 0) {
  bul <- sprintf(
    "- %s spans ~%0.2f Ma (%0.2f–%0.2f Ma)",
    top$species, as.numeric(top$duration), as.numeric(top$last_occ), as.numeric(top$first_occ)
  )
  msg <- paste("Longest spans (point estimates):", paste(bul, collapse = "\n"), sep = "\n")
  cat(paste(strwrap(msg, width = 90), collapse = "\n"))
}
```

How to read: Rows with a large difference between first_occ and last_occ indicate species known across a longer interval. Very narrow spans can reflect either real short durations or sparse/uncertain dating.

```{r span-plot, fig.cap="Temporal ranges of each species"}
tar_read(span_plot)
```

Reading the plot: Each line shows the known time window for a species. Longer lines mean more extended presence in the record; shorter lines may signal limited data or shorter occupations. Remember the x‑axis runs from older (right) to younger (left).

### 2.1 Uncertainty via Monte Carlo

Dating is uncertain because many finds have age ranges rather than exact ages. To reflect this, we repeatedly sample plausible dates within each occurrence’s range and recompute species ranges many times. We then summarise the results.

How to interpret the summaries:

- Median: The “typical” value across the many re‑computations.
- 90% interval: Where most solutions land when we respect the given age ranges. Narrow intervals suggest better‑constrained dates; wide intervals indicate more uncertainty.

```{r spans-mc-table}
spans_mc_tbl <- tar_read(spans_mc)
knitr::kable(spans_mc_tbl,
             caption = "Species span medians with 90\\% credible intervals (Ma).",
             digits = 3) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
```

```{r spans-mc-interpret}
s <- spans_mc_tbl
s$dur_uncert <- s$dur_hi - s$dur_lo
top_wide <- dplyr::arrange(s, dplyr::desc(dur_uncert)) |> head(3)
if (nrow(top_wide) > 0) {
  bul <- sprintf(
    "- %s: median duration %0.2f Ma (90%% interval %0.2f–%0.2f Ma)",
    top_wide$species, as.numeric(top_wide$dur_med), as.numeric(top_wide$dur_lo), as.numeric(top_wide$dur_hi)
  )
  msg <- paste("Widest duration uncertainty (MC):", paste(bul, collapse = "\n"), sep = "\n")
  cat(paste(strwrap(msg, width = 90), collapse = "\n"))
}
```

What to look for: Compare each species’ median first/last appearances with the 90% interval bounds. Species with wide intervals may shift in or out of overlap with others once uncertainty is considered.

```{r span-mc-plot, fig.cap="Temporal spans with MC median and 90% CI"}
tar_read(span_mc_plot)
```

Reading the plot: Thin lines mark the 90% interval; thick lines and points mark the median span. Focus on whether species’ intervals clearly overlap or remain distinct once uncertainty is included.

Takeaways:
- Longest spans: p_aethiopicus and p_boisei (~1.2 Ma); h_erectus and a_africanus near 1 Ma.
- Uncertainty narrows or widens spans by species; several retain clear separation, while others plausibly overlap when uncertainty is considered.

---

## 3 Pairwise temporal overlap

This section shows, for every species pair, how much time their known ranges overlap. Larger values suggest longer periods of co‑occurrence; near‑zero values point to little or no known overlap.

How to read the heat‑map:

- Darker/lighter colours indicate less/more overlap in Ma.
- The diagonal is blank because a species overlaps itself by definition.
```{r overlap-heatmap, fig.cap="Pairwise temporal overlap (Ma)"}
tar_read(overlap_plot)
```

```{r overlap-interpret}
ov_wide <- tar_read(overlap_matrix)
long <- tidyr::pivot_longer(ov_wide, -species_i, names_to = "species_j", values_to = "overlap_Ma")
# keep only one direction per unordered pair (i < j lexicographically)
long <- dplyr::filter(long, species_i < species_j)
top <- dplyr::arrange(long, dplyr::desc(overlap_Ma)) |> head(5)
if (nrow(top) > 0) {
  bul <- sprintf("- %s with %s: ~%0.2f Ma", top$species_i, top$species_j, as.numeric(top$overlap_Ma))
  cat(paste(strwrap(paste("Largest point-estimated overlaps:", paste(bul, collapse = "\n"), sep = "\n"), width = 90), collapse = "\n"))
}
```

Takeaway: Use this grid to spot clusters of species that co‑occur for long periods and pairs that rarely coincide. This helps frame hypotheses about ecological or geographic partitioning versus chronological succession.

```{r overlap-heatmap-mc, fig.cap="Pairwise temporal overlap (median over MC draws)"}
tar_read(overlap_mc_plot)
```

```{r overlap-mc-interpret}
ov_mc <- tar_read(overlap_mc)
ov_mc2 <- dplyr::filter(ov_mc, species_i < species_j)
top <- dplyr::arrange(ov_mc2, dplyr::desc(ov_med)) |> head(5)
if (nrow(top) > 0) {
  bul <- sprintf(
    "- %s with %s: median ~%0.2f Ma (90%% %0.2f–%0.2f)",
    top$species_i, top$species_j, as.numeric(top$ov_med), as.numeric(top$ov_lo), as.numeric(top$ov_hi)
  )
  cat(paste(strwrap(paste("Largest overlaps with uncertainty:", paste(bul, collapse = "\n"), sep = "\n"), width = 90), collapse = "\n"))
}
```

With uncertainty included: Overlap values can shift once dating ranges are respected. Focus on changes relative to the point estimates above—stable, high‑overlap pairs are more robust; volatile, low‑overlap pairs may reflect sparse data.

Takeaways:
- Strong co‑occurrence pairs stand out and remain robust under uncertainty; use these to target ecological or geographic comparisons.
- Near‑zero overlaps likely indicate turnover or sampling gaps; corroborate with stratigraphic context.

---

## 4 Species richness through time (MC)

```{r bin-counts-mc-table}
bin_counts_tbl <- tar_read(bin_counts_mc)
knitr::kable(bin_counts_tbl,
             caption = "Species richness per 0.1 Ma bin: median and 90\\% CI.",
             digits = 3) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
```

```{r richness-interpret}
b <- bin_counts_tbl
peak <- b[which.max(b$n_med), c("bin_mid", "n_med")]
msg <- sprintf(
  "Interpretation: Peak median richness is %.0f species around %0.2f Ma; elevated diversity persists from ~2.35 to ~2.00 Ma (see plot).",
  as.numeric(peak$n_med), as.numeric(peak$bin_mid)
)
cat(paste(strwrap(msg, width = 90), collapse = "\n"))
```

How to read: For each 0.1 Ma time slice, we estimate how many species are present when accounting for dating uncertainty. The 90% interval reflects uncertainty in both dating and binning.

```{r bin-counts-mc-plot, fig.cap="Species richness over time (median with 90% CI)"}
tar_read(bin_counts_plot)
```

Takeaway: Look for broad peaks and troughs rather than small wiggles. Peaks may reflect periods of genuine diversity or times/places with more sampling. Remember the time axis is reversed (older on the right).

Takeaways:
- Peak median richness ~6 species around ~2.35–2.00 Ma; earlier intervals support fewer concurrent species.

---

## 5 Range dynamics (spatial)

This section describes where species are found over time. For each time bin we report: the geographic centre of observations (centroid), north–south and east–west extent, the area that encloses the outermost finds (convex hull), and how far the centroid moves between bins (velocity).

Interpretation tips:

- Centroids trace the “centre of mass” of finds; they are summaries, not migration routes.
- Extents (lat/long spans) and hull areas can be small when data are sparse, and large when finds are widespread.
- Velocity reflects how quickly the centroid shifts; one‑bin sequences will not show a connecting line in the map.

```{r range-metrics-table}
range_tbl <- tar_read(range_metrics)
# Abbreviate headers for readability
range_tbl_disp <- range_tbl |>
  dplyr::rename(
    cent_lat = centroid_lat,
    cent_lon = centroid_long,
    lon_span = long_span,
    hull_km2 = hull_area_km2,
    vel_km_per_Ma = velocity_km_per_Ma
  )
# Round velocity to whole km/Ma to avoid false precision
range_tbl_disp <- dplyr::mutate(range_tbl_disp, vel_km_per_Ma = round(vel_km_per_Ma))

kableExtra::landscape(
  knitr::kable(range_tbl_disp,
             caption = "Range metrics per species per time bin.",
             digits = 3) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
)
```

How to read: Within each species, scan bins from older to younger (right to left in time figures). Increases in hull_area_km2 suggest wider known distributions; jumps in velocity_km_per_Ma indicate rapid shifts in where finds are concentrated.

```{r range-metrics-note}
if (all(is.na(range_tbl$hull_area_km2) | range_tbl$hull_area_km2 == 0)) {
  cat("Note: Hull areas are 0 in this build. This occurs when fewer than three distinct localities fall in each species×bin; with sufficient points, areas will be > 0.")
}
```

```{r range-interpret}
rt <- range_tbl
if (nrow(rt) > 0) {
  nonzero <- sum(rt$hull_area_km2 > 0, na.rm = TRUE)
  top_vel <- rt[order(rt$velocity_km_per_Ma, decreasing = TRUE), ][1:min(3, nrow(rt)), c("species","bin","velocity_km_per_Ma")]
  if (nrow(top_vel) > 0) {
    items <- sprintf("%s (bin %0.2f): %0.0f km/Ma", top_vel$species, as.numeric(top_vel$bin), as.numeric(top_vel$velocity_km_per_Ma))
    msg <- sprintf(
      "Interpretation: Hull areas > 0 in %d species×bin rows; top centroid shifts (km/Ma) occur at: %s",
      nonzero, paste(items, collapse = "; ")
    )
    cat(paste(strwrap(msg, width = 90), collapse = "\n"))
  }
}
```

```{r centroid-tracks, fig.cap="Centroid tracks (zoomed to occupied extent) for selected species"}
# Build zoomed-in centroid track maps for the same species
range_tbl <- tar_read(range_metrics)
ct_tbl    <- tar_read(centroid_track_maps)
sp3       <- head(ct_tbl$species, 3)

plot_centroid_zoom <- function(dat, sp) {
  import::from("rnaturalearth", ne_countries)
  import::from("ggplot2", ggplot, aes, geom_sf, geom_path, geom_point, coord_sf, labs, theme_minimal)

  dat <- dat[dat$species == sp, , drop = FALSE]
  if (nrow(dat) == 0) return(NULL)
  xr <- range(dat$centroid_long, na.rm = TRUE)
  yr <- range(dat$centroid_lat,  na.rm = TRUE)
  pad_x <- max(diff(xr) * 0.2, 2)
  pad_y <- max(diff(yr) * 0.2, 2)
  xlim  <- c(xr[1] - pad_x, xr[2] + pad_x)
  ylim  <- c(yr[1] - pad_y, yr[2] + pad_y)

  world <- ne_countries(scale = "medium", continent = "Africa", returnclass = "sf")
  p <- ggplot() +
    geom_sf(data = world, fill = "grey95", color = "grey70", linewidth = 0.2) +
    {
      if (nrow(dat) > 1) geom_path(data = dat, aes(x = centroid_long, y = centroid_lat), color = "steelblue")
      else NULL
    } +
    geom_point(data = dat, aes(x = centroid_long, y = centroid_lat), size = 2, color = "steelblue") +
    coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +
    labs(x = "Longitude", y = "Latitude",
         title = paste("Centroid track (zoomed):", sp),
         subtitle = "Zoomed to the occupied extent for clarity") +
    theme_minimal()
  p
}

plots <- lapply(sp3, function(s) plot_centroid_zoom(range_tbl, s))
for (p in plots) if (!is.null(p)) print(p)
```

Interpretation: Tracks cluster in East Africa for the sampled species, with short within‑bin movements. Large apparent “jumps” reflect bins with few, spatially separated finds; treat high velocities as signals to inspect underlying points.

Exported artefacts: full matrix (`range_metrics.csv`), per‑species CSVs (`range_metrics_<species>.csv`), and centroid track PNGs (`centroid_track_<species>.png`). Use these for mapping or additional per‑species exploration.

Takeaways:
- Centroid movement is modest and local in most bins; large jumps often reflect sparse, spatially separated finds.
- Hull areas are zero in this build due to <3 localities per species×bin; with denser bins, areas will inform spatial spread.
- Use per‑species CSVs to inspect bins behind any high velocities.

---

## 6 Site clusters (HDBSCAN)

We group finds that are close in both location and time. Each observation belongs to a cluster (or remains unclustered if it does not fit cleanly). For each cluster, we measure how spread out it is in time—our simple “mixing index.”

```{r st-mix-tbl}
st_mix <- tar_read(mixing_index_by_cluster)
knitr::kable(st_mix,
             caption = "Within‑cluster mixing index (temporal span in Ma).",
             digits = 3) |>
  kable_styling(full_width = FALSE) |>
  kable_classic()
```

How to read: Higher mixing_index values indicate clusters spanning longer time windows; low values suggest tighter temporal groupings.

```{r st-mix-plot, fig.cap="Within‑cluster temporal mixing index by cluster"}
tar_read(mixing_index_plot)
```

Takeaway: Use this figure to spot clusters that mix material across long intervals versus those that are temporally compact—useful context when interpreting local sequences or potential reworking.

Exported artefacts: per‑observation clusters (`st_clusters.csv`) and  
cluster‑level mixing indices (`mixing_index_by_cluster.csv`).

Takeaways:
- Most clusters are temporally tight (median mixing index ~0.05–0.10 Ma); a few span >0.1 Ma and warrant closer stratigraphic review.

---

## 7 Lead–Lag in FAD/LAD by Country

We ask whether a species tends to appear earlier or later in some countries relative to the continent as a whole. We account for dating uncertainty by repeatedly sampling within age ranges and summarising the results.

Reading the deltas:

- Delta FAD < 0: Country appears earlier than the continent‑wide benchmark (remember: larger Ma = older).
- Delta FAD > 0: Country appears later.
- The same logic applies to Delta LAD (last appearances).

```{r leadlag-tbl}
leadlag_tbl <- tar_read(leadlag_country)
# Abbreviate headers for readability
leadlag_disp <- leadlag_tbl |>
  dplyr::rename(
    cont = continent,
    n = n_records,
    dFAD_med = delta_fad_median,
    dFAD_lo  = delta_fad_lower,
    dFAD_hi  = delta_fad_upper,
    dLAD_med = delta_lad_median,
    dLAD_lo  = delta_lad_lower,
    dLAD_hi  = delta_lad_upper,
    status   = leadlag_status
  )

kableExtra::landscape(
  knitr::kable(leadlag_disp,
             caption = "Delta FAD/Delta LAD by country relative to continent (medians with 95\\% CI).",
             digits = 3) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
)
```

```{r leadlag-tbl-interpret}
ll <- leadlag_tbl
# Choose highlights with a small tolerance to avoid near-zero ties
tol <- 1e-3
earliest <- ll |>
  dplyr::filter(!is.na(delta_fad_median), delta_fad_median < -tol) |>
  dplyr::arrange(delta_fad_median) |>
  head(3)
latest <- ll |>
  dplyr::filter(!is.na(delta_fad_median), delta_fad_median > tol) |>
  dplyr::arrange(dplyr::desc(delta_fad_median)) |>
  head(3)
bul1 <- if (nrow(earliest) > 0) sprintf("- Earliest FAD: %s in %s (%0.3f Ma earlier)", earliest$species, earliest$country, as.numeric(earliest$delta_fad_median)) else character(0)
bul2 <- if (nrow(latest)   > 0) sprintf("- Latest FAD: %s in %s (+%0.3f Ma)",       latest$species,   latest$country,   as.numeric(latest$delta_fad_median))   else character(0)
msg <- paste(c("Highlights:", bul1, bul2), collapse = "\n")
cat(paste(strwrap(msg, width = 90), collapse = "\n"))
```

What to look for: Countries with clearly negative Delta FAD may be early locales for a species; clearly positive values indicate later presence. Wide intervals call for cautious interpretation.

```{r leadlag-ranks}
leadlag_ranks <- tar_read(leadlag_ranks)
kableExtra::landscape(
  knitr::kable(leadlag_ranks,
             caption = "Country rankings by Delta FAD and Delta LAD (ascending; ties share ranks).",
             digits = 3) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
)
```

Reading the rankings: Lower ranks (near 1) suggest earlier first appearances relative to the continent; higher ranks suggest later timing.

```{r leadlag-maps, fig.cap="Lead–lag choropleths (Delta FAD), zoomed to species’ countries"}
leadlag_tbl <- tar_read(leadlag_country)
sp3 <- unique(leadlag_tbl$species)
sp3 <- head(sp3, 3)

plot_leadlag_zoom <- function(leadlag_tbl, sp, metric = "delta_fad_median") {
  import::from("rnaturalearth", ne_countries)
  import::from("countrycode", countrycode)
  import::from("dplyr", filter, mutate, select, left_join)
  import::from("ggplot2", ggplot, aes, geom_sf, scale_fill_gradient2, labs, theme_minimal, coord_sf, guides, guide_colorbar)

  world <- ne_countries(scale = "medium", returnclass = "sf") |>
    dplyr::select(iso_a3, name, geometry)

  dat <- leadlag_tbl |>
    dplyr::filter(species == !!sp) |>
    mutate(iso_a3 = countrycode(country, origin = "country.name", destination = "iso3c")) |>
    dplyr::select(iso_a3, !!metric)

  world2 <- world |>
    left_join(dat, by = "iso_a3")

  # determine zoom window over non-NA countries
  non_na <- !is.na(world2[[metric]])
  if (!any(non_na)) return(NULL)
  bb <- sf::st_bbox(world2[non_na, ])
  pad_x <- max((bb$xmax - bb$xmin) * 0.1, 1)
  pad_y <- max((bb$ymax - bb$ymin) * 0.1, 1)
  xlim  <- c(bb$xmin - pad_x, bb$xmax + pad_x)
  ylim  <- c(bb$ymin - pad_y, bb$ymax + pad_y)

  ggplot() +
    geom_sf(data = world2, aes(fill = .data[[metric]]), color = "grey40", size = 0.1) +
    scale_fill_gradient2(
      name = "Delta FAD (Ma)", low = "#2166ac", mid = "#f7f7f7", high = "#b2182b", midpoint = 0, na.value = "#d9d9d9"
    ) +
    coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) +
    labs(
      title = paste0("Lead–Lag (Delta FAD), zoomed: ", sp),
      subtitle = "Blue = earlier than continent; Red = later; Grey = missing",
      x = NULL, y = NULL
    ) +
    theme_minimal() +
    guides(fill = guide_colorbar(barwidth = 12))
}

plots_ll <- lapply(sp3, function(s) plot_leadlag_zoom(leadlag_tbl, s))
for (p in plots_ll) if (!is.null(p)) print(p)
```

Interpretation: Zoomed maps highlight early country signals: for example, h_erectus shows earlier first appearances in Ethiopia and Kenya (blue), while some species show later persistence elsewhere (red), aligning with the table highlights below.

Takeaways:
- Early first appearances concentrate in East Africa for several species (e.g., h_erectus, h_habilis), while later persistence appears in other regions.
- Use the table’s earliest/ latest highlights to prioritise country‑level stratigraphic follow‑up.

---

## 8 Sampling intensity caveat

We collapse duplicate fragments to single occurrences but keep a `sampling_intensity` count. Where sampling is sparse (few finds or long hiatuses), “absences” can reflect preservation and discovery rather than true absence. The companion analyses use this information to avoid over‑interpreting gaps.

---

## 9 Temporal beta diversity at key localities

We assess how species composition changes from one time bin to the next within selected site clusters. We decompose total beta diversity (Sørensen) into turnover (Simpson) and nestedness components using the Baselga partition.

Selection criteria: clusters with ≥ 3 non‑empty bins and ≥ 3 species across the series; up to the top 6 by number of steps are shown.

```{r beta-turnover-table}
beta_tbl <- tar_read(beta_turnover_tbl)

kableExtra::landscape(
  knitr::kable(beta_tbl |>
                 dplyr::rename(
                   clust = cluster_id,
                   b_tot = beta_total,
                   b_turn = beta_turnover,
                   b_nest = beta_nestedness
                 ) |>
                 head(10),
              caption = "Temporal beta diversity between successive bins at key localities (top 10 rows).",
              digits = 3) |>
    kable_styling(full_width = FALSE) |>
    kable_classic()
)  
```

```{r beta-turnover-plot, fig.cap="Temporal beta diversity components (turnover vs nestedness) per locality; thin grey lines = relative richness and effort."}
tar_read(beta_turnover_plot)
```

Interpretation: Values near 1 indicate strong dissimilarity between adjacent bins; a larger turnover component points to species replacement, whereas nestedness indicates one bin’s composition is largely a subset of the other. Thin lines (richness and effort) provide context: high beta paired with low effort may reflect sparse sampling rather than ecological turnover.

---

## 10 Re-occupancy gaps (Poisson)

We ask: given local sampling intensity through time, how surprising is a long gap between finds at a site? We use the intensity history to compute the probability of seeing no finds over each gap; very small probabilities suggest a true break in presence, not just missed sampling.

```{r reocc-top}
reocc_tbl  <- tar_read(reocc_pvals)
likely_tbl <- tar_read(likely_reoccupancy_events)
```

```{r reocc-plot, fig.cap="Gap-wise P(no finds) vs. hiatus duration; highlighted points pass FDR < 0.05"}
tar_read(reocc_pvals_plot)
```

How to read: Points show gaps between consecutive finds at each site. Lower values on the y‑axis (smaller probabilities) are more surprising given the local sampling history. Highlighted points pass a multiple‑testing threshold and are candidates for true re‑occupancy events.

```{r reocc-likely}
if (nrow(likely_tbl) > 0) {
  knitr::kable(likely_tbl,
               caption = "Likely re-occupancy events (FDR < 0.05), ordered by adjusted p-value.",
               digits = 3) |>
    kable_styling(full_width = FALSE) |>
    kable_classic()
} else {
  cat("No gaps pass FDR < 0.05 under the current specification.")
}
```

Exported artefacts (see outputs/): site‑level sampling history per bin (`site_lambda.csv`), full gap table (`reocc_pvals.csv`), and flagged events (`likely_reoccupancy_events.csv`).

Takeaways:
- One site shows a statistically surprising hiatus (~0.07 Ma) given local sampling intensity; this is a candidate re‑occupancy signal for targeted investigation.

---

## 11 Identifiability bias: Pr(indet) over time/region/effort

We model the probability that a specimen is indeterminate (“indet”) as a function of time, region, and effort. Counts are aggregated by 0.25 Ma bins per country (including indets), and a binomial GLM is fit with a natural spline on time and covariates for country and log1p(effort). We plot partial time effects per country at median effort, and a diagnostic of observed Pr(indet) versus effort.

```{r indet-time, fig.cap="Pr(indet) over time by country (median effort; 90% CI)."}
tar_read(indet_time_plot)
```

```{r indet-effort, fig.cap="Observed Pr(indet) vs log1p(effort) by country."}
tar_read(indet_effort_plot)
```

Interpretation: Increasing Pr(indet) toward older bins may indicate more fragmentary preservation and/or methodological limits; country differences can reflect local taphonomy or research practice. Effort helps separate identification bias from sparse sampling, but residual confounding is possible; interpret cautiously.

---

## 12 Lazarus gaps vs effort

We assess within-range absences for each species and ask whether those gaps are unexpectedly long given a time-varying effort proxy λ(t) aggregated across the dataset. For a gap between consecutive occurrences, we integrate λ(t) over the gap and compute the probability of zero detections under a Poisson model, scaled by a species-level α̂ chosen so that expected detections over the species’ range match the observed count.

```{r lazarus-table}
lz <- tar_read(lazarus_tbl)

disp <- lz |>
  dplyr::arrange(p_adj) |>
  dplyr::mutate(p_adj = round(p_adj, 4), p_no_detect = round(p_no_detect, 4)) |>
  dplyr::rename(
    start    = gap_start_Ma,
    end      = gap_end_Ma,
    gap      = gap_Ma,
    eff_strat = effort_stratum,
    l_sum    = lambda_sum,
    alpha    = alpha_hat,
    Lambda   = Lambda_gap,
    p_ndet   = p_no_detect,
    improb   = flag_improbable,
    low_pow  = low_power
  ) |>
  dplyr::select(species, start, end, gap, eff_strat, l_sum, alpha, Lambda, p_ndet, p_adj, improb) |>
  head(10)

kableExtra::landscape(
  knitr::kable(
    disp,
    caption = "Lazarus gaps with smallest BH-adjusted probabilities (top 10).",
    digits = 3
  ) |>
  kable_styling(latex_options = c("scale_down")) |>
  kable_classic()
)
```

```{r lazarus-rank, fig.cap="Lazarus gaps ranked by improbability (−log10 BH-adjusted p)."}
tar_read(lazarus_rank_plot)
```

Reading the plot: Bars show the most improbable within-range gaps under the effort-adjusted model; stronger bars have smaller adjusted p-values. Use the species timelines and underlying occurrences to inspect whether these reflect genuine hiatuses or sampling artefacts.

Takeaways:
- Several species exhibit improbable Lazarus gaps when compared to the global effort proxy; these merit stratigraphic review and sensitivity checks.
- Results depend on the effort series specification and bin width; see the planned sensitivity module.

---

## 13 Bin-size sensitivity

We check whether time-sliced results are stable under different bin widths (0.1, 0.25, 0.5 Ma). The first figure shows per-bin series for N (occurrence count), S (species richness), and the z-scored effort proxy (lambda_z). The second summarises pairwise stability: Spearman ρ and RMSD of z-scores after resampling coarser series to the 0.1 Ma grid over overlapping periods.

```{r bin-sense-series, fig.cap="Per-bin metrics across widths (faceted by metric × width)."}
tar_read(bin_sense_series_plot)
```

```{r bin-sense-stability, fig.cap="Stability across widths: Spearman ρ and RMSD of z-scores."}
tar_read(bin_sense_stability_plot)
```

Takeaway: High ρ and low RMSD indicate robust patterns that are not binning artefacts. Where discrepancies occur, interpret peaks and troughs cautiously and consider reporting width-robust ranges.

---

## 14 Next steps

1. Implement Solow’s **OLE** to estimate continental extinction probabilities.
2. Fit hierarchical occupancy models at key sites (e.g., Olduvai Gorge) integrating `sampling_intensity`.
3. Visualise spatio‑temporal colonisation fronts via animated maps.
